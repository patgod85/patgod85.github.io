<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A few notes</title>
    <description>gg&lt;br/&gt; V&lt;br/&gt; G&lt;br/&gt; d&lt;br/&gt; :wq&lt;br/&gt;
</description>
    <link>https://patgod85.github.io/</link>
    <atom:link href="https://patgod85.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 15 Mar 2017 08:53:29 +0000</pubDate>
    <lastBuildDate>Wed, 15 Mar 2017 08:53:29 +0000</lastBuildDate>
    <generator>Jekyll v3.1.3</generator>
    
      <item>
        <title>Понравившиеся frontend доклады</title>
        <description>&lt;p&gt;Мне понравились эти доклады на веб-ориентированных конференциях и митапах в Москве.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;MoscowJS Conf (Москва, 24 сентября 2016)
    &lt;ul&gt;
      &lt;li&gt;“Классическое программирование для фронтендеров”&lt;/li&gt;
      &lt;li&gt;Игорь Алексеенко&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://moscowjs.ru/talk/klassicheskoe-programmirovanie-dlya-frontenderov&quot;&gt;Слайды и видео&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Web Standards Days (Москва, 28 января 2017)
    &lt;ul&gt;
      &lt;li&gt;“JSX? Пфф!”&lt;/li&gt;
      &lt;li&gt;Владимир Гриненко @tadatuta&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://wsd.events/2017/01/28/pres/jsx-pff.pdf&quot;&gt;Слайды&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://youtu.be/sn-H4r6x-Cw?list=PLMBnwIwFEFHdF7aJTIHQ_wJ5tkpyG7CNI&quot;&gt;Видео&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;MoscowJS 35 (Москва, 16 февраля 2017)
    &lt;ul&gt;
      &lt;li&gt;“Redux-saga естественный код”&lt;/li&gt;
      &lt;li&gt;Евгений Евсеев&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://moscowjs.ru/talk/redux-saga-na-steroidah&quot;&gt;Слайды&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Wed, 15 Mar 2017 00:00:00 +0000</pubDate>
        <link>https://patgod85.github.io/post/2017/03/15/the-favorite-presentations/</link>
        <guid isPermaLink="true">https://patgod85.github.io/post/2017/03/15/the-favorite-presentations/</guid>
        
        <category>meetup</category>
        
        <category>javascript</category>
        
        <category>presentation</category>
        
        
        <category>post</category>
        
      </item>
    
      <item>
        <title>Кодировка файлов конфигурации VIM</title>
        <description>&lt;p&gt;Столкнулся с проблемой, что известное решение при работе с кириллической раскладкой клавиатуры:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-vim&quot;&gt;set langmap=!\\&quot;№\\;%?*ёйцукенгшщзхъфывапролджэячсмитьбюЁЙЦУКЕHГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ;!@#$%&amp;amp;*`qwertyuiop[]asdfghjkl\\;&#39;zxcvbnm\\,.~QWERTYUIOP{}ASDFGHJKL:\\&quot;ZXCVBNM&amp;lt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;работает у меня в CYGWIN и не работает в VIM for Windows. Попробовал какие-то плагины, но всё не помогает.&lt;/p&gt;

&lt;p&gt;Решени оказалось в кодировке файла &lt;strong&gt;_vimrc&lt;/strong&gt;. Он был в cp1251. Поменял кодировку на UTF-8 и всё стало работать прекрасно.&lt;/p&gt;

&lt;p&gt;Подумал, что неплохо тоже самое провернуть и для Ideavim, но langmap там не работает, 
поэтому решил воспользоваться советом &lt;a href=&quot;http://stackoverflow.com/a/31491711/1273958&quot;&gt;http://stackoverflow.com/a/31491711/1273958&lt;/a&gt; и сделать мапинг отдельно. 
Но в PhpStorm в Normal mode русская раскладка работать отказывалась. Каково было моё удивление, когда смена кодировки &lt;strong&gt;.ideavimrc&lt;/strong&gt; 
c UTF-8 на cp1251 решило мою проблему.&lt;/p&gt;

</description>
        <pubDate>Fri, 08 Jul 2016 00:00:00 +0000</pubDate>
        <link>https://patgod85.github.io/post/2016/07/08/vim-langmap-encoding/</link>
        <guid isPermaLink="true">https://patgod85.github.io/post/2016/07/08/vim-langmap-encoding/</guid>
        
        <category>vim</category>
        
        <category>vimrc</category>
        
        <category>windows</category>
        
        <category>langmap</category>
        
        <category>ideavim</category>
        
        <category>encoding</category>
        
        
        <category>post</category>
        
      </item>
    
      <item>
        <title>Проект в песочнице на Ember.js</title>
        <description>&lt;p&gt;План ознакомительного доклада для команды разработчиков.&lt;/p&gt;

&lt;h1 id=&quot;ember&quot;&gt;Знакомство с ember&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Ember.js - это фреймворк для создания SPA&lt;/li&gt;
  &lt;li&gt;Делать некий туториал не имеет смысла, ибо таковой есть на официальном сайте &lt;emberjs.com&gt;&lt;/emberjs.com&gt;&lt;/li&gt;
  &lt;li&gt;Прихожу к выводу, что нет фреймворков, которые как гласят их лозунги, простые и лёгкие для использования. За сколькие 
брался - везде найдутся подводные камни, которые заберут уйму времени и попортят крови. Погружение в Ember заняло недели 2.&lt;/li&gt;
  &lt;li&gt;В целом мои ощущения положительные&lt;/li&gt;
  &lt;li&gt;Лучше расскажу от подходе к написанию проекта.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;section&quot;&gt;Описание проекта&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;Табель рабочего времени. Замена имеющегося решения в plain xls&lt;/li&gt;
  &lt;li&gt;Несколько команд или отделов&lt;/li&gt;
  &lt;li&gt;Многопользовательский режим&lt;/li&gt;
  &lt;li&gt;Примитивная отчётность&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/patgod85/timesheet2&quot;&gt;https://github.com/patgod85/timesheet2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ember/timesheet-example.jpg&quot; alt=&quot;Screen shot&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;Архитектура и технологии&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Есть серверная часть на Symfony2, Doctrine ORM и Mysql&lt;/li&gt;
  &lt;li&gt;В базе хранятся данные календарей в формате ical&lt;/li&gt;
  &lt;li&gt;Календари есть для компании, команды и сотрудника&lt;/li&gt;
  &lt;li&gt;На клиенте парсятся календари и отображается содержимое&lt;/li&gt;
  &lt;li&gt;Взаимодействие между клиентом и сервером при помощи REST API&lt;/li&gt;
  &lt;li&gt;Для эксперимента для реализации клиента выбран Ember.js 2&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;client-side--ember&quot;&gt;Подход к написанию client side на Ember&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Разворачивается проект из командной строки. Я помещаю его в папку /src-client&lt;/li&gt;
  &lt;li&gt;Имеется и подразумевается использование EmberData для получения данных с сервера&lt;/li&gt;
  &lt;li&gt;Adapters существуют для настройки получения данных с сервера, выбора формата REST протокола&lt;/li&gt;
  &lt;li&gt;Для тестовых целей есть mirage, который будет мочить данные&lt;/li&gt;
  &lt;li&gt;На клиенте мы описываем модели, которые будут использованы для мапирования данных с сервера&lt;/li&gt;
  &lt;li&gt;Сущности, которыми Ember оперирует для построения UI: routes (controllers), components, helpers&lt;/li&gt;
  &lt;li&gt;Ember - маршрутоориентированный, всё отталкивается от маршрутов&lt;/li&gt;
  &lt;li&gt;Маршруты реализованы не после #, как мне удавалось видеть в других фреймворках, а как привычный URL&lt;/li&gt;
  &lt;li&gt;Создадим новый маршрут в ember-cli: &lt;code&gt;ember g route routename&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Ember-cli - вспомогательная командная строка, которыми снабжаются многие фреймворки сейчас&lt;/li&gt;
  &lt;li&gt;Существует масса дополнения, которые удобно ставятся через ember-cli. Кроме того можно установить сторонние библиотеки, вроде moment.js&lt;/li&gt;
  &lt;li&gt;Удалим созданный маршрут &lt;code&gt;ember destroy route routename&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;В файле &lt;code&gt;routes.js&lt;/code&gt; содержится описание маршрутов и их иерархия&lt;/li&gt;
  &lt;li&gt;Итак наш маршрут создан, следующий этап - это получение данных. Мы обращаемся к сервису &lt;strong&gt;store&lt;/strong&gt;, он подобно ORM, 
смотрит свой репозиторий и либо берёт из данные него либо делает запрос на сервер. Можно посмотреть пример получения 
данных в маршруте &lt;a href=&quot;https://github.com/patgod85/timesheet2/blob/671a3c0/src-client/timesheet/app/routes/employee.js&quot;&gt;Employee.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Запрос данных обёрнут в промис&lt;/li&gt;
  &lt;li&gt;Когда данные подготовлены, можем отобразить их в представлении, в папке templates. Место положение шаблонов определяется соглашением. 
Движок для шаблонов - HBS.&lt;/li&gt;
  &lt;li&gt;Стоит отметить удобную возможность указания шаблона для тех случаев, когда представление “ожидает”. Просто создадим рядом шаблон routename-loading.hbs
и его содержимое будет показываться пока не резолвятся промисы по загрузке модели.&lt;/li&gt;
  &lt;li&gt;Связывание компонентов и моделей двунаправленное, но можно организовать и однонаправленное.&lt;/li&gt;
  &lt;li&gt;При помощи actions мы можем управлять состоянием компонентов и изменять данные. 
При изменении данных и вызове &lt;code&gt;model.save()&lt;/code&gt;, они автоматически отправятся на сервер, при необходимости.
Кроме того есть сервис &lt;strong&gt;Router&lt;/strong&gt; предоставляющий метод &lt;code&gt;transitionTo(routename)&lt;/code&gt; для смены маршрута&lt;/li&gt;
  &lt;li&gt;Когда стек Route -&amp;gt; Template готов, можем запустить наше приложение. Для этого воспользуемся &lt;code&gt;ember server&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Дальше остаётся писать код&lt;/li&gt;
  &lt;li&gt;После первых шагов поразило, что нет хелпера для drop down из коробки. Нужно написать его руками.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;section-2&quot;&gt;Дальнейшее погружение&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;После первых шагов и нескольких рабочих страничек возникают некоторые проблемы, связанные с тем, что плохо разобрался в подходе к работе с данными&lt;/li&gt;
  &lt;li&gt;Для того чтобы ember в runtime перерисовывал только изменившиеся элементы интерфейса, нужно правильно подходить к связыванию. 
В частности массивы и объекты оформлять как объекты Ember. Использовать &lt;code&gt;Ember.Object.create&lt;/code&gt; и &lt;code&gt;.pushObjects()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Использовались &lt;code&gt;Ember.computed&lt;/code&gt; и &lt;code&gt;Ember.observable&lt;/code&gt;, они принимают список сущностей от которых зависят. 
При зависимости от массивов существует специальный синтаксис позволяющий проверять только определённые свойства у элементов массивов, например&lt;/li&gt;
  &lt;li&gt;Важно массивы данных не перезаписывать при изменении их элементов, а корректировать при помощи таких методов как &lt;code&gt;map&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Для вынесения некоторой логики в отдельный слой, например парсинг ical, использовались сервисы.&lt;/li&gt;
  &lt;li&gt;Использование сервисов реализуется через DI.&lt;/li&gt;
  &lt;li&gt;Можно настроить инжектирование сервисов в Initializers, например для всех компонентов, а можно в конкретном компоненте инжектировать сервис при помощи &lt;code&gt;Ember.inject.service(&#39;servicename&#39;)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;По моему скромному мнению, удобно организовано тестирование. Каждый модуль тестируется, при этом применяются слегка разнообразные подходы. В папке tests тесты структурированы по этим подходам.
Как это ни странно, я даже пишу и запускаю тесты перед пушами.&lt;/li&gt;
  &lt;li&gt;Для тестирования компонентов используется запуск движка HBS.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;section-3&quot;&gt;Бесполезные выводы&lt;/h1&gt;

&lt;p&gt;Из минусов:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Достаточно медленный. Конечно нужно сделать поправку на кривые руки, но в моём приложении для команды из 9 человек, 
  расписание на 1 месяц = 31*9, то есть порядка 300 экземпляров компонентов. Строится почти 3 секунды. Это весьма неприятно.
  Имеются техники по оптимизации их я хочу пощупать  ближайшем будущем.&lt;/li&gt;
  &lt;li&gt;У меня на Windows, при использовании &lt;code&gt;ember server&lt;/code&gt;, после исправления файла в phpStorm и перехода фокуса на браузер, 
  страница автоматически перезагружается только через пару секунд. Но я не искал пока методов ускорения сборки.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Из плюсов:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Весьма читаемый код и наглядная структура проекта&lt;/li&gt;
  &lt;li&gt;Удобная инфраструктура разработки&lt;/li&gt;
  &lt;li&gt;Удобное тестирование&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 08 Jul 2016 00:00:00 +0000</pubDate>
        <link>https://patgod85.github.io/post/2016/07/08/ember-in-the-sandbox/</link>
        <guid isPermaLink="true">https://patgod85.github.io/post/2016/07/08/ember-in-the-sandbox/</guid>
        
        <category>timesheet</category>
        
        <category>ember</category>
        
        <category>javascript</category>
        
        
        <category>post</category>
        
      </item>
    
      <item>
        <title>Vangatour.ru фильтр отелей</title>
        <description>&lt;p&gt;Запущен экспериментальный сайт, позволяющий при помощи ряда простых фильтров найти вам всего 4 отеля, 
которые удовлетворяют вашим желаниям. &lt;a href=&quot;http://vangatour.ru/&quot;&gt;http://vangatour.ru/&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 24 Jun 2016 00:00:00 +0000</pubDate>
        <link>https://patgod85.github.io/post/2016/06/24/vangatour-hotels-filter/</link>
        <guid isPermaLink="true">https://patgod85.github.io/post/2016/06/24/vangatour-hotels-filter/</guid>
        
        <category>vangatour</category>
        
        <category>hotels</category>
        
        <category>filter</category>
        
        <category>search</category>
        
        <category>tours</category>
        
        
        <category>post</category>
        
      </item>
    
      <item>
        <title>Блок ожидания ответа от сервера на React</title>
        <description>&lt;p&gt;Иначе говоря &lt;strong&gt;waiting screen&lt;/strong&gt; или &lt;strong&gt;splash screen&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Имеется компонент в проекте, чтобы впредь не забыть, как его использовать, следует написать маленькую заметку.&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;Цель компонента:&lt;/h1&gt;

&lt;p&gt;После сабмита формы скрыть форму и, пока не получен ответ от сервера, отображать некоторый текст и анимацию процесса ожидания.&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;Код формы:&lt;/h1&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/6b3627cd3c51933c724a73c7c8000ba4.js?file=Component.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Все используемые файлы можно найти тут &lt;a href=&quot;https://gist.github.com/patgod85/6b3627cd3c51933c724a73c7c8000ba4&quot;&gt;https://gist.github.com/patgod85/6b3627cd3c51933c724a73c7c8000ba4&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;splashscreenjs&quot;&gt;Необходимые действия по интеграции компонента SplashScreen.js:&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Подключить модуль с компонентом и модуль-контейнер событий (Reflux подход)&lt;/li&gt;
  &lt;li&gt;Обернуть нашу форму, в компонент SplashScreen&lt;/li&gt;
  &lt;li&gt;У компонента SplashScreen указать &lt;strong&gt;id&lt;/strong&gt; и &lt;strong&gt;message&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Перед запросом к сервеку инициировать событие show в SplashStore (&lt;code&gt;splashActions.show(id)&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;При получении ответа от сервера инициировать событие hide в SplashStore (&lt;code&gt;splashActions.hide(id)&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 18 May 2016 00:00:00 +0000</pubDate>
        <link>https://patgod85.github.io/post/2016/05/18/react-waiting-screen/</link>
        <guid isPermaLink="true">https://patgod85.github.io/post/2016/05/18/react-waiting-screen/</guid>
        
        <category>waiting_screen</category>
        
        <category>splash_screen</category>
        
        <category>react</category>
        
        <category>javascript</category>
        
        <category>reflux</category>
        
        
        <category>post</category>
        
      </item>
    
      <item>
        <title>Настройка развёртывания jekyll на Github Pages при использвание плагинов отключаемых директивой --safe</title>
        <description>&lt;p&gt;Мне очень нравится markdown. И мне очень бы хотелось писать статьи именно в нём, в своём удобном редакторе кода. На данный момент этот редактор PhpStorm + IdeaVim.
Хранения статей в репозитории на Github тоже очень комфортная вещь. Поэтому в качестве движка блога я выбрал Jekyll, раз его предлагает использовать Github Pages. 
Хотя Ruby и не нативный язык для моих проектов, для меня это не является минусом при выборе.&lt;/p&gt;

&lt;p&gt;Знакомство с Jekyll прошло довольно быстро. И я остался доволен. За исключением одного момента - это плагины, которые Github Pages не поддерживают. 
Эти плагины будут игнорироваться при сборке сайта с директивой –safe.&lt;/p&gt;

&lt;p&gt;А хочется хранить в репозитории только исходники сайта.&lt;/p&gt;

&lt;p&gt;Вот прямо не иметь собранного сайта в репозитории не получится, но можно разделить исходники и готовую версию сайта в разные ветки. Несколько лет назад люди уже придумали такое решение.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/randymorris/randymorris.github.com/tree/source&quot;&gt;Тут&lt;/a&gt; предлагается иметь две ветки в репозитории: &lt;strong&gt;source&lt;/strong&gt; и &lt;strong&gt;master&lt;/strong&gt;. 
Github Pages использует &lt;strong&gt;master&lt;/strong&gt; для отображения сайта на *.github.io, а ветку &lt;strong&gt;source&lt;/strong&gt; можно установить по умолчанию в настройках репозитория на github.com .&lt;/p&gt;

&lt;p&gt;Для удобства работы с двумя ветками предлагается использовать скрипт, который переносит собранный сайт в ветку &lt;strong&gt;master&lt;/strong&gt; и отправляет изменения на сервер. 
Команд из приведённого примера мне показалось недостаточно, поэтому я немного его расширил. Примечание: я работаю в окружении Windows.&lt;/p&gt;

&lt;p&gt;Исходники сайта должны храниться в ветке &lt;strong&gt;source&lt;/strong&gt;. Сейчас рабочая копия находится в этой ветке. Итак произвожу нужные действия с сайтом, отлаживаю его. Выполняю commit.&lt;/p&gt;

&lt;p&gt;Запускаю скрипт &lt;a href=&quot;https://github.com/patgod85/patgod85.github.io/blob/source/git-publish-io.bat&quot;&gt;git-publish-io.bat&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:: Собирает наш сайт
call jekyll build 

:: Удяляет ветку master
git branch -D master

:: Создает и разворачивает новую ветку master
git checkout -b master

:: Те файлы, которые не находятся под управлением git в ветке source теперь добавляются в индекс
git add _site/*

:: Выполняется commit
git commit -m &quot;auto commit by git-publish-io&quot;

:: Переносит корень репозитория в папку собранного сайта
git filter-branch --subdirectory-filter _site/ -f

:: Удяляет из индекса ветки master bat-файл. Если этот файл не коммитить выше, то после filter-branch он пропадёт и выполнение скрипта прервётся
git rm -rf --cached git-publish-io.bat

:: Выполняет commit без bat-файла. 
git commit -m &quot;auto commit by git-publish-io. Remove bat file from master&quot;

:: Возврящает рабочую копию в ветку source
git checkout -f source

:: Удаляет ветку master на Github
git push origin --delete master

:: Выполнят push всех веток на Github
git push --all origin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Таким образом на Github по умолчанию для проекта *.github.io будут видны только исходники проекта. А в ветке &lt;strong&gt;master&lt;/strong&gt; всегда будут только 2 коммита с текущим состоянием собранного сайта.&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Apr 2016 09:00:59 +0000</pubDate>
        <link>https://patgod85.github.io/post/2016/04/18/jekyll-push-with-plugins/</link>
        <guid isPermaLink="true">https://patgod85.github.io/post/2016/04/18/jekyll-push-with-plugins/</guid>
        
        <category>jekyll</category>
        
        <category>github_pages</category>
        
        <category>safe</category>
        
        <category>plugins</category>
        
        <category>deploy</category>
        
        <category>push</category>
        
        <category>git</category>
        
        
        <category>post</category>
        
      </item>
    
      <item>
        <title>Установка предыдущей версии MIUI</title>
        <description>&lt;p&gt;Всвязи с тем, что последние обновления стали превносить неприятные для меня изменения в прошивку, решил откатиться до версии прошивки &lt;a href=&quot;http://miuipro.ru/spisok-izmeneniy-miui-6-3-3/&quot;&gt;6.3.3&lt;/a&gt;.
На момент решения у меня стояла какая-то прошивка из ветки 6.4.*.
Саму прошивку можно найти в архиве &lt;a href=&quot;http://ota.miuipro.ru/roms/xiaomi_redmi_note_2/miuipro_v5.0.2_hermes_6.3.3.zip&quot;&gt;http://ota.miuipro.ru/roms/xiaomi_redmi_note_2/miuipro_v5.0.2_hermes_6.3.3.zip&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;На всякий случай сделал бекап из под старой прошивки &lt;strong&gt;Настойки &amp;gt; Другие настройки &amp;gt; Восстановлени и сброс &amp;gt; Локальный Бэкап&lt;/strong&gt;;&lt;/li&gt;
  &lt;li&gt;После стандартной процедуры установки ОС из под TWRP, система загрузилась, но выскочило окно с предупрежденем “Не удалось получить id устройства. IMEI = null” (Что-то подобное). Сим-карта не определяется;&lt;/li&gt;
  &lt;li&gt;Зашёл в TWRP и сделал полный бекап на внешнюю карту памяти;&lt;/li&gt;
  &lt;li&gt;Тут же в TWRP сделал Wipe Cache, Wipe Dalvik, Wipe Data;&lt;/li&gt;
  &lt;li&gt;Телефон загрузился с заводскими настройками;&lt;/li&gt;
  &lt;li&gt;Восстановил из системного бекапа (сделанного в первом пункте) имеющийся данные, приложения и прочее.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Теперь ошибка из пункта 2 не выдаётся и всё хорошо. Разве что слетели некоторые настройки системные, типа режимов экономии батареи.&lt;/p&gt;

&lt;p&gt;Замечу, что подобного не происходило ни разу при обновлении до более старших версий прошивки, поэтому я связываю проблему из пункта 2 именно с даунгрейдом.&lt;/p&gt;

&lt;p&gt;PS: появилось чисто субъективное ощущение, что аппарат стал медленнее расходовать заряд батареи.&lt;/p&gt;

</description>
        <pubDate>Mon, 18 Apr 2016 08:13:59 +0000</pubDate>
        <link>https://patgod85.github.io/post/2016/04/18/downgrade-of-miui/</link>
        <guid isPermaLink="true">https://patgod85.github.io/post/2016/04/18/downgrade-of-miui/</guid>
        
        <category>android_5</category>
        
        <category>downgrade</category>
        
        <category>version</category>
        
        <category>miui</category>
        
        <category>redmi_note_2</category>
        
        <category>imei</category>
        
        <category>null</category>
        
        
        <category>post</category>
        
      </item>
    
      <item>
        <title>Генерация документации по WSDL</title>
        <description>&lt;p&gt;В проекте на php имею WCF веб-сервис. Хочу для него сгенерировать документацию для программиста. Окружение - Windows.&lt;/p&gt;

&lt;p&gt;Полезные ссылки:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://tomi.vanek.sk/index.php?page=wsdl-viewer&quot;&gt;http://tomi.vanek.sk/index.php?page=wsdl-viewer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/onesto/wsdl-viewer&quot;&gt;https://github.com/onesto/wsdl-viewer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Алгоритм:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;В своём Cygwin устанавливаем пакет &lt;strong&gt;libxslt&lt;/strong&gt;. После этого станет доступна команда &lt;strong&gt;xsltproc&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Скачиваем наш wsdl файл.&lt;/li&gt;
  &lt;li&gt;Далее клонируем вышеприведённый проект&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Используем файл wsdl-viewer.xsl из полученного проекта выполняем команду:&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;xsltproc wsdl-viewer.xsl your.wsdl &amp;gt; your.html&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Thu, 14 Apr 2016 13:00:59 +0000</pubDate>
        <link>https://patgod85.github.io/post/2016/04/14/generating-of-documentation-for-wsdl/</link>
        <guid isPermaLink="true">https://patgod85.github.io/post/2016/04/14/generating-of-documentation-for-wsdl/</guid>
        
        <category>cygwin</category>
        
        <category>documentation</category>
        
        <category>wcf</category>
        
        <category>wsdl</category>
        
        <category>xsl</category>
        
        
        <category>post</category>
        
      </item>
    
      <item>
        <title>Доступ к внешней SD карте на MIUI 7</title>
        <description>&lt;p&gt;Обладаю электронным устройством Xiaomi Redmi Note 2 под управлением MIUI 7 (сборка 6.3.24, Android 5.0). 
Купил для него внешний накопитель Micro SDHC карту на 32 Gb.&lt;/p&gt;

&lt;p&gt;Вставил её в устройство. Устройство карту нашло. Я решил перенести на неё файлы, потребляющие наибольшее количество ресурсов, то есть фото и видео. 
Открыл приложение Far On Droid, которое стало выбрасывать сообщение о том, что ему нужно выдать права для записи на внешнюю карту памяти. 
Попробовал сделать то же самое стандартным файловым менеджером — файлы успешно переместились. 
Можно закрыть глаза на невозможность пользования Far, но галереям (не стандартным) оказывается тоже нужны подобные права. 
Думаю не только им. Нужно найти решение.&lt;/p&gt;

&lt;p&gt;Я покопался в google в надежде найти быстрое решение. 
Пишут, что в Android 4.4 KitKat действительно существует проблема доступа к внешней карте памяти, но Android 5 уже от неё свободен. 
Поглядел разрешения программ, в разделе безопасности и ничего полезного не нашёл. 
Попробовал установить приложение, рекомендуемое в большинстве инструкций SDFix: KitKat Writable MicroSD. 
Но оно не помогло.&lt;/p&gt;

&lt;p&gt;Стал перечитывать топики в форумах, которые как-то касаются проблемы. Заметил упоминание о «Documents App». 
Открыл &lt;strong&gt;Настройки &amp;gt; Все приложения&lt;/strong&gt; но там не нашёл ничего похожего. 
На самом деле там было приложение, но записи в списке были сортированы таким образом, что ища по алфавиту, я не мог его найти. 
В моём случае (в русской версии ОС) приложение называлось &lt;strong&gt;Документы&lt;/strong&gt; и располагалось в самом конце списка приложений. 
После включения, оно переместилось вверх и заняло место в алфавитном порядке.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/sdcard-miui/outside.png&quot; alt=&quot;Outside&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Открыв его нужно в нижней части экрана нажать на кнопку «Включить».&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/sdcard-miui/inside.png&quot; alt=&quot;Inside&quot; /&gt;&lt;/p&gt;

&lt;p&gt;После этого Far On Droid успешно получил доступ к карте и смог записывать туда всё что хочет.&lt;/p&gt;

&lt;p&gt;К слову, после перемещения файлов на карту памяти, сортировка по дате в галерее сломалась. 
Все видео-файлы камеры получили дату дня перемещения. Но возможно я как-то это поправлю.&lt;/p&gt;

&lt;p&gt;Не подписывайтесь на канал и не ставьте лайки.&lt;/p&gt;
</description>
        <pubDate>Thu, 14 Apr 2016 10:33:59 +0000</pubDate>
        <link>https://patgod85.github.io/post/2016/04/14/sdcard-miui7/</link>
        <guid isPermaLink="true">https://patgod85.github.io/post/2016/04/14/sdcard-miui7/</guid>
        
        <category>access</category>
        
        <category>android_5</category>
        
        <category>documents_app</category>
        
        <category>external</category>
        
        <category>miui</category>
        
        <category>redmi_note_2</category>
        
        <category>sdcard</category>
        
        <category>writable</category>
        
        
        <category>post</category>
        
      </item>
    
  </channel>
</rss>
